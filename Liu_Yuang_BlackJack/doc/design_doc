Bet:
    1, it records the bet the player made each round
    2, the same with 1
    3, I don't think this class will have some contributions for the future, it seems like the final version
BlackJack:
    1, it's the entrance of the whole program
    2, the same with 1
    3, for future, it will let more than 1 player play the game by calling another api
Card:
    1, one card with suit, number, value
    2, it's the basic element of the whole program
    3, I don't think this class will have some contributions for the future, it seems like the final version
Check
	1, rules of the game
	2, check whether the player wins or loses
	3, for future, the rules can be updated
Config
    1, some configurations of the system
    2, it provide some constant or static variables in the program
    3, for future, other static variables can be added to this class
Dealer
    1, a role in this game
    2, the same with 1
    3, for future, it can add some methods as a role the different from player, such as judger or compere
HandCard
	1, the cards that the player's current hold
	2, it maintains a List that allow player can split his handcard
	3, for future, the handcard can support player holds more than 2 hands of cards 
Person
    1, it defines all the person in the game, and is the super class of Player and Dealer
    2, it defines some variables and methods that all persons have in common
    3, for future, more details such as birthday, nickname, some common methods and some new roles can be added
Player
    1, a role in this game
    2, player is an essential element in this game, it contains some variables and some operations the player might 
    take
    3, for future, it can add some information that player own and add the operations for other games
Shuffle
    1, it's a machine control all cards and give card in random
    2, with the Shuffle class, the player and dealer can get card randomly, the Shuffle class controls all the cards
    3, for future, the Shuffle is already support more than 1 set of cards, just call Shuffle(int n) in ok
Table
    1, it's where player play the game
    2, the Table is the controller of the game, it calls apis from some instances and gather needed
    information and then send them to other apis from some instances to let the game goes smoothly
    3, for future, the Table will be updated for multi-players'game
Utils
    1, some common methods in this program
    2, the same with 1
    3, for future, the utility methods can be added here
Wallet
    1, to save or change the money of players
	2, it defines some methods for the game to get or edit the money of players
	3, for future, we can define different wallet for multiple players
